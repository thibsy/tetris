class t{raw_matrix;column_start;column_end;row_start;row_end;constructor(t,r,n,e){if(t>r||n>e)throw new Error("column and row start must not be larger than column and row end.");this.column_start=t,this.column_end=r,this.row_start=n,this.row_end=e,this.clear()}addTetrimino(t,r){}clear(){this.raw_matrix=function(t,r,n,e){let s=[];for(let i=n;i<=e;i++){s[i]=[];for(let n=t;n<=r;n++)s[i][n]=null}return s}(this.column_start,this.column_end,this.row_start,this.row_end)}}class r{interval_id=null;current_level=0;drop_hook;constructor(t){this.drop_hook=t}getDropRate(){let t=48;for(let r=1,n=this.current_level;r<=n;r++)switch(!0){case r<=8:t-=5;break;case 9===r:t-=2;break;case 10===r:case 13===r:case 16===r:case 19===r:case 29===r:t-=1}return t}setLevel(t){this.current_level=t,this.isRunning()&&(this.pause(),this.start())}start(){if(this.isRunning())throw new Error("cannot start clock because it is still running.");this.interval_id=setInterval((()=>{this.isRunning()&&this.drop_hook()}),this.getIntervalFor(this.getDropRate()))}pause(){if(!this.isRunning())throw new Error("cannot stop clock because it is not running.");clearInterval(this.interval_id),this.interval_id=null}getIntervalFor(t){return 1e3/60*t}isRunning(){return null!==this.interval_id}}class n{preview;matrix;clock;constructor(){this.preview=new t(-2,2,-2,2),this.matrix=new t(-5,4,-2,19),this.clock=new r(this.tick)}tick(){}spawnTetrimino(){}start(){this.clock.start()}}window.onload=function(){const t=new n;document.getElementById("tetris-start").addEventListener("click",t.start)}();
